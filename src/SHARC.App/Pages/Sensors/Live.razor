@page "/sensors/{sharcId}/live"
@implements IAsyncDisposable
@inherits TrakHoundComponentBase
@layout Layout
@using TrakHound.Requests
@using System.Text.Json.Serialization

<TrakHoundPageTitle>@GetPageTitle()</TrakHoundPageTitle>

<div class="page">
    <div class="breadcrumb-panel">
        <BreadcrumbLinks>
            <BreadcrumbLink Display="Sensors" Link="@GetPath("/")"></BreadcrumbLink>
            <BreadcrumbLink Display="@SharcId"></BreadcrumbLink>
        </BreadcrumbLinks>
    </div>
    <div class="page-sidebar">
        <Sidebar SharcId="@SharcId" />
    </div>
    <div class="page-content">

        @if (!loading)
        {
            <div class="toolbar-panel">
                <div class="toolbar-container">
                    <RadzenDropDown TValue="string" Data="@sensorNames" Value="@selectedSensorName" ValueChanged="SelectedSensorChanged" Placeholder="Select Sensor.." />
                </div>
                <div class="toolbar-container">

                    @if (consumer == null)
                    {
                        <button class="btn btn-primary btn-query" @onclick="Subscribe"><span class="icon fa-solid fa-sharp fa-magnifying-glass"></span>Subscribe</button>
                    }
                    else
                    {
                        <button class="btn btn-light btn-query" @onclick="Unsubscribe"><span class="icon fa-solid fa-pause"></span>Unsubscribe</button>
                        <div class="listening">
                            <ListeningIndicator />
                        </div>
                    }

                </div>
            </div>

            @if (resultSuccess != null)
            {
                var resultIcon = resultSuccess.Value ? "fa-solid fa-sharp fa-check" : "fa-solid fa-sharp fa-circle-xmark";
                var resultClass = resultSuccess.Value ? "success" : "error";

@*                 <div class="status-panel @resultClass">
                    <span class="status-icon @resultIcon"></span>
                    <span class="status-message">@resultMessage</span>
                </div> *@

                if (resultSuccess.Value)
                {
                    var items = bufferItems.Get()?.ToList().Take(bufferIndex);

                    //var chartItems = items.Reverse();
                    var chartItems = GetChartItems(items);
                    var tableItems = items?.OrderByDescending(o => o.Timestamp);

                    <div class="content-panel">
                        <RadzenSplitter Orientation="Orientation.Vertical">
                            <RadzenSplitterPane Min="100px">
                                <div class="chart-panel">
                                    <RadzenChart>
                                        <RadzenLineSeries Data="@chartItems" CategoryProperty="Timestamp" Title="@selectedSensorName" ValueProperty="Value" Stroke="var(--accentLight)" StrokeWidth="3" />
                                            <RadzenLegend Visible="false" />
                                        <RadzenCategoryAxis Formatter="@GetCategoryAxisLabel" Min="@from" Max="@to" Step="@GetCategoryAxisStep()">
                                            <RadzenGridLines Visible="true" />
                                        </RadzenCategoryAxis>

                                        @if (valueRangeSet)
                                        {
                                            <RadzenValueAxis Formatter="@GetValueAxisLabel" Min="@min" Max="@max" Step="@GetValueAxisStep()">
                                                <RadzenGridLines Visible="true" />
                                                <RadzenAxisTitle Text="@sensorModel?.Units" />
                                            </RadzenValueAxis>
                                        }
                                        else
                                        {
                                            <RadzenValueAxis Formatter="@GetValueAxisLabel">
                                                <RadzenGridLines Visible="true" />
                                                <RadzenAxisTitle Text="@sensorModel?.Units" />
                                            </RadzenValueAxis>                                           
                                        }

                                    </RadzenChart>
                                </div>
                            </RadzenSplitterPane>
                            <RadzenSplitterPane Min="100px">
                                <div class="table-panel">
                                    <RadzenDataGrid Data="@tableItems"
                                                    TItem="ValueItem"
                                                    Density="Density.Compact"
                                                    AllowVirtualization="true"
                                                    GridLines="DataGridGridLines.Vertical">
                                        <Columns>
                                            <RadzenDataGridColumn TItem="ValueItem" Property="SensorName" Title="SensorName" Width="100px" />
                                            <RadzenDataGridColumn TItem="ValueItem" Property="Timestamp" Title="Timestamp" Width="180px" />
                                            <RadzenDataGridColumn TItem="ValueItem" Title="Offset" Width="180px">
                                                <Template Context="context">
                                                    <span>@GetOffsetDebug(context.Timestamp)</span>
                                                </Template>
                                            </RadzenDataGridColumn>
                                            <RadzenDataGridColumn TItem="ValueItem" Property="Value" Title="Value" />
                                        </Columns>
                                    </RadzenDataGrid>
                                </div>
                            </RadzenSplitterPane>
                        </RadzenSplitter>
                    </div>
                }
            }
        }
        else
        {
            <div class="loading-panel">
                <Loading Message="@loadingMessage" />
            </div>
        }

    </div>
</div>

@code {

    private const int bufferSize = 100;

    private TrakHoundSharcModel sharcModel;
    private SharcSensorInformation sensorModel;
    private ITrakHoundConsumer<ValueModel> consumer;

    private bool? resultSuccess;
    private string resultMessage;

    private DateTime from;
    private DateTime to;
    private double max = double.MinValue;
    private double min = double.MaxValue;
    private bool valueRangeSet = false;
    private TimeSpan window = TimeSpan.FromSeconds(30);
    private TimeSpan interval = TimeSpan.FromMilliseconds(50);

    private CircularBuffer<ValueItem> bufferItems = new CircularBuffer<ValueItem>(bufferSize);
    private int bufferIndex;
    private System.Timers.Timer updateTimer;

    private IEnumerable<string> sensorNames;
    private string selectedSensorName;

    private bool loaded = false;
    private bool loading = true;
    private string loadingMessage = "Loading Sensors..";


    struct ValueItem
    {
        public string SensorName { get; set; }
        public double Value { get; set; }
        public DateTime Timestamp { get; set; }
    }

    class SharcSensorInformation
    {
        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("description")]
        public string Description { get; set; }

        [JsonPropertyName("units")]
        public string Units { get; set; }
    }

    class ValueModel
    {
        [JsonPropertyName("v")]
        public double Value { get; set; }

        [JsonPropertyName("t")]
        public DateTime Timestamp { get; set; }
    }


    [Parameter]
    public string SharcId { get; set; }


    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        await Unsubscribe();
    }

    private async void QueryClicked()
    {
        await Load(true);
    }

    private async Task Load(bool forceLoad = false)
    {
        if (forceLoad || !loaded)
        {
            sharcModel = null;
            sensorNames = null;

            resultSuccess = null;
            resultMessage = null;

            loaded = true;
            loading = true;
            loadingMessage = "Loading Sensor..";
            await InvokeAsync(StateHasChanged);

            sharcModel = await Client.Api.QueryJson<TrakHoundSharcModel>($"sharc/api/{SharcId}");

            sensorNames = await Client.Api.QueryJson<IEnumerable<string>>($"sharc/api/{SharcId}/io");
            sensorNames = sensorNames?.OrderBy(o => o);

            loading = false;
            loadingMessage = null;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task Subscribe()
    {
        if (!string.IsNullOrEmpty(selectedSensorName))
        {
            sensorModel = await Client.Api.QueryJson<SharcSensorInformation>($"sharc/api/{SharcId}/io/{selectedSensorName}");

            resultSuccess = true;

            consumer = await Client.Api.SubscribeJson<ValueModel>($"sharc/api/{SharcId}/io/{selectedSensorName}/values");
            if (consumer != null)
            {
                consumer.Received += ValueReceived;

                to = DateTime.Now;
                from = to - window;

                updateTimer = new System.Timers.Timer();
                updateTimer.Interval = interval.TotalMilliseconds;
                updateTimer.Elapsed += UpdateTimerElapsed;
                updateTimer.Start();
            }
        }
    }

    private async Task Unsubscribe()
    {
        if (consumer != null) consumer.Dispose();
        consumer = null;

        if (updateTimer != null) updateTimer.Dispose();

        await InvokeAsync(StateHasChanged);
    }

    private async void SelectedSensorChanged(string sensorName)
    {
        selectedSensorName = sensorName;
        sensorModel = null;

        bufferIndex = 0;
        bufferItems.Clear();

        valueRangeSet = false;
        max = double.MinValue;
        min = double.MaxValue;

        await InvokeAsync(StateHasChanged);
    }

    private void ValueReceived(object sender, ValueModel model)
    {
        var item = new ValueItem();
        item.SensorName = selectedSensorName;
        item.Value = model.Value;
        item.Timestamp = model.Timestamp;
        bufferItems.Add(item);

        valueRangeSet = true;
        if (model.Value > max) max = model.Value + (model.Value * 0.1);
        if (model.Value < min) min = model.Value - (model.Value * 0.1);

        bufferIndex++;
        bufferIndex = Math.Min(bufferSize - 1, bufferIndex);
    }

    private async void UpdateTimerElapsed(object sender, System.Timers.ElapsedEventArgs args)
    {
        from = from.Add(interval);
        to = to.Add(interval);

        await InvokeAsync(StateHasChanged);
    }

    private ValueItem[] GetChartItems(IEnumerable<ValueItem> items)
    {
        if (!items.IsNullOrEmpty())
        {
            double lastValue = 0;

            var a = items.Reverse().ToArray();
            var chartItems = new ValueItem[a.Length * 2];

            var x = 0;
            for (var i = 0; i < a.Length; i++)
            {
                var firstItem = new ValueItem();
                firstItem.Value = a[i].Value;
                firstItem.Timestamp = a[i].Timestamp;
                chartItems[x] = firstItem;
                lastValue = firstItem.Value;
                x++;

                if (i < a.Length - 1)
                {
                    var secondItem = new ValueItem();
                    secondItem.Value = a[i].Value;
                    secondItem.Timestamp = a[i + 1].Timestamp;
                    chartItems[x] = secondItem;
                    x++;
                }
                else
                {
                    var secondItem = new ValueItem();
                    secondItem.Value = a[i].Value;
                    secondItem.Timestamp = to;
                    chartItems[x] = secondItem;
                    x++;
                }
            }

            return chartItems;
        }

        return null;
    }


    private string GetPageTitle()
    {
        return $"SHARC - {SharcId}";
    }


    private string GetValueAxisLabel(object value)
    {
        return ((double)value).ToString("N2");
    }

    private object GetValueAxisStep()
    {
        if (valueRangeSet)
        {
            return (max - min) / 6;
        }
        else
        {
            return 1;
        }
    }

    private string GetCategoryAxisLabel(object value)
    {
        var timestamp = ((DateTime)value);

        if (timestamp > to.AddSeconds(-2.5)) // Subtract 1/2 Axis Step
        {
            return timestamp.ToString("hh:mm:ss.fff tt");
        }
        else
        {
            return GetOffset(timestamp);
        }
    }

    private object GetCategoryAxisStep()
    {
        return TimeSpan.FromSeconds(5);
    }

    private string GetOffset(DateTime timestamp)
    {
        return $"-{(to - timestamp).ToString("mm\\:ss")}";
    }

    private string GetOffsetDebug(DateTime timestamp)
    {
        return $"-{(to - timestamp).ToString()}";
    }

}
