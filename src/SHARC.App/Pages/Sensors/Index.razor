@page "/sensors/{sharcId}"
@inherits TrakHoundComponentBase
@layout SensorsLayout
@using TrakHound.Requests
@using System.Text.Json.Serialization

<TrakHoundPageTitle>@GetPageTitle()</TrakHoundPageTitle>

<div class="page">

    <div class="breadcrumb-panel">
        <BreadcrumbLinks>
            <BreadcrumbLink Display="Sensors" Link="@GetPath("/")"></BreadcrumbLink>
            <BreadcrumbLink Display="@SharcId"></BreadcrumbLink>
        </BreadcrumbLinks>
    </div>

    @if (!loading)
    {
        <div class="toolbar-panel">
            <div class="toolbar-panel-left">
                <button class="btn btn-primary btn-query" @onclick="QueryClicked"><span class="icon fa-solid fa-sharp fa-magnifying-glass"></span>Query</button>
                <RadzenDropDown TValue="string" Data="@sensorNames" @bind-Value="@selectedSensorName" />
                <RadzenDropDown TValue="QueryType" Data="@(Enum.GetValues<QueryType>())" @bind-Value="@selectedQueryType" />
            </div>
            <div class="toolbar-container">

                @switch (selectedQueryType)
                {
                    case QueryType.Raw:

                        <SpinEdit @bind-Value="@take" />
                        break;

                    case QueryType.Aggregate:

                        <RadzenDropDown TValue="TrakHoundAggregateType" Data="@(Enum.GetValues<TrakHoundAggregateType>())" @bind-Value="@selectedAggregateType" />
                        <SpinEdit @bind-Value="@selectedAggregateWindow" />
                        <RadzenDropDown TValue="WindowUnits" Data="@(Enum.GetValues<WindowUnits>())" @bind-Value="@selectedAggregateWindowUnits" />
                        break;
                }

            </div>
            <div class="toolbar-container">
                <TimeRangeSelection @bind-From="@from" @bind-To="@to" ShowTime="true" />
            </div>
        </div>

        @if (!valueTableItems.IsNullOrEmpty())
        {
            <div class="status-panel">
                <span>@valueTableItems.Count()</span>
                <span>/</span>
                <span>@totalCount</span>
            </div>
            <div class="content-panel">
                <RadzenSplitter Orientation="Orientation.Vertical">
                    <RadzenSplitterPane Min="100px">
                        <div class="chart-panel">
                            <RadzenChart>
                                <RadzenLineSeries Data="@valueTableItems" CategoryProperty="Timestamp" Title="@selectedSensorName" ValueProperty="Value" Stroke="var(--accentDark)" StrokeWidth="0.5" />
                                <RadzenLegend Visible="false" />
                                <RadzenCategoryAxis Formatter="@GetCategoryAxisLabel">
                                    <RadzenGridLines Visible="true" />
                                    <RadzenAxisTitle Text="Timestamp" />
                                </RadzenCategoryAxis>
                                <RadzenValueAxis Formatter="@GetValueAxisLabel">
                                    <RadzenGridLines Visible="true" />
                                    <RadzenAxisTitle Text="@selectedSensorName" />
                                </RadzenValueAxis>
                            </RadzenChart>
                        </div>
                    </RadzenSplitterPane>
                    <RadzenSplitterPane Min="100px">
                        <div class="table-panel">
                            <RadzenDataGrid Data="@valueTableItems"
                                            TItem="ValueTableItem"
                                            Density="Density.Compact"
                                            AllowVirtualization="true"
                                            GridLines="DataGridGridLines.Vertical">
                                <Columns>
                                    <RadzenDataGridColumn TItem="ValueTableItem" Property="SensorName" Title="SensorName" Width="100px" />
                                    <RadzenDataGridColumn TItem="ValueTableItem" Property="Value" Title="Value" />
                                    <RadzenDataGridColumn TItem="ValueTableItem" Property="Timestamp" Title="Timestamp" Width="200px" />
                                </Columns>
                            </RadzenDataGrid>
                        </div>
                    </RadzenSplitterPane>
                </RadzenSplitter>
            </div>
        }

        @if (!aggregateTableItems.IsNullOrEmpty())
        {
            <div class="status-panel">
                <span>@aggregateTableItems.Count()</span>
            </div>
            <div class="content-panel">
                <RadzenSplitter Orientation="Orientation.Vertical">
                    <RadzenSplitterPane Min="100px">
                        <div class="chart-panel">
                            <RadzenChart>
                                <RadzenLineSeries Data="@aggregateTableItems" CategoryProperty="End" Title="@selectedSensorName" ValueProperty="Value" Stroke="var(--accent)" StrokeWidth="1">
                                    <RadzenMarkers Visible="true" MarkerType="MarkerType.Circle" Fill="var(--accent)" Size="5" />
                                </RadzenLineSeries>
                                <RadzenLegend Visible="false" />
                                <RadzenCategoryAxis Formatter="@GetCategoryAxisLabel">
                                    <RadzenGridLines Visible="true" />
                                    <RadzenAxisTitle Text="Timestamp" />
                                </RadzenCategoryAxis>
                                <RadzenValueAxis Formatter="@GetValueAxisLabel">
                                    <RadzenGridLines Visible="true" />
                                    <RadzenAxisTitle Text="@selectedSensorName" />
                                </RadzenValueAxis>
                            </RadzenChart>
                        </div>
                    </RadzenSplitterPane>
                    <RadzenSplitterPane Min="100px">
                        <div class="table-panel">
                            <RadzenDataGrid Data="@aggregateTableItems"
                                            TItem="AggregateTableItem"
                                            Density="Density.Compact"
                                            AllowVirtualization="true"
                                            GridLines="DataGridGridLines.Vertical">
                                <Columns>
                                    <RadzenDataGridColumn TItem="AggregateTableItem" Property="SensorName" Title="SensorName" Width="100px" />
                                    <RadzenDataGridColumn TItem="AggregateTableItem" Property="Value" Title="Value" />
                                    <RadzenDataGridColumn TItem="AggregateTableItem" Property="Start" Title="Start" Width="200px" />
                                    <RadzenDataGridColumn TItem="AggregateTableItem" Property="End" Title="End" Width="200px" />
                                </Columns>
                            </RadzenDataGrid>
                        </div>
                    </RadzenSplitterPane>
                </RadzenSplitter>
            </div>
        }
    }
    else
    {
        <div class="loading-panel">
            <Loading Message="@loadingMessage" />
        </div>
    }

</div>

@code {

    private TrakHoundSharcModel model;

    private DateTime from;
    private DateTime to;
    private int take = 5000;

    private int totalCount;
    private IEnumerable<ValueTableItem> valueTableItems;
    private IEnumerable<AggregateTableItem> aggregateTableItems;

    private IEnumerable<string> sensorNames;
    private string selectedSensorName;

    private QueryType selectedQueryType;
    private TrakHoundAggregateType selectedAggregateType;

    private double selectedAggregateWindow;
    private WindowUnits selectedAggregateWindowUnits;

    private bool loaded = false;
    private bool loading = true;
    private string loadingMessage = "Loading Sensors..";


    enum QueryType
    {
        Raw,
        Aggregate
    }

    enum WindowUnits
    {
        Seconds,
        Minutes,
        Hours,
        Days
    }

    class ValueTableItem
    {
        public string SensorName { get; set; }
        public double Value { get; set; }
        public DateTime Timestamp { get; set; }
    }

    class AggregateTableItem
    {
        public string SensorName { get; set; }
        public double Value { get; set; }
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
    }

    class ValueModel
    {
        [JsonPropertyName("value")]
        public string Value { get; set; }

        [JsonPropertyName("timestamp")]
        public DateTime Timestamp { get; set; }
    }

    class AggregateWindowModel
    {
        [JsonPropertyName("value")]
        public double Value { get; set; }

        [JsonPropertyName("start")]
        public DateTime Start { get; set; }

        [JsonPropertyName("end")]
        public DateTime End { get; set; }
    }


    [Parameter]
    public string SharcId { get; set; }


    protected async override Task OnInitializedAsync()
    {
        from = DateTime.Today;
        to = from.AddDays(1);

        await Load();
    }

    private async void QueryClicked()
    {
        await Load(true);
    }

    private async Task Load(bool forceLoad = false)
    {
        if (forceLoad || !loaded)
        {
            model = null;
            sensorNames = null;
            valueTableItems = null;
            aggregateTableItems = null;

            loaded = true;
            loading = true;
            loadingMessage = "Loading Sensor..";
            await InvokeAsync(StateHasChanged);

            model = await Client.Api.QueryJson<TrakHoundSharcModel>($"sharc/api/{SharcId}");

            sensorNames = await Client.Api.QueryJson<IEnumerable<string>>($"sharc/api/{SharcId}/io");
            if (!sensorNames.IsNullOrEmpty())
            {
                if (!string.IsNullOrEmpty(selectedSensorName))
                {
                    Console.WriteLine($"FROM = {from.ToISO8601String()}");
                    Console.WriteLine($"TO = {to.ToISO8601String()}");

                    switch (selectedQueryType)
                    {
                        case QueryType.Raw:
                            await LoadRaw(from, to);
                            break;

                        case QueryType.Aggregate:
                            await LoadAggregate(from, to);
                            break;
                    }
                }
            }

            loading = false;
            loadingMessage = null;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadRaw(DateTime from, DateTime to)
    {
        var queryParameters = new Dictionary<string, string>();
        queryParameters.Add("from", from.ToUnixTime().ToString());
        queryParameters.Add("to", to.ToUnixTime().ToString());
        queryParameters.Add("skip", "0");
        queryParameters.Add("take", take.ToString());
        queryParameters.Add("sortOrder", "-1");

        var values = await Client.Api.QueryJson<IEnumerable<ValueModel>>($"sharc/api/{SharcId}/io/{selectedSensorName}", queryParameters);
        if (!values.IsNullOrEmpty())
        {
            queryParameters = new Dictionary<string, string>();
            queryParameters.Add("from", from.ToUnixTime().ToString());
            queryParameters.Add("to", to.ToUnixTime().ToString());

            totalCount = (await Client.Api.QueryString($"sharc/api/{SharcId}/io/{selectedSensorName}/count", queryParameters)).ToInt();

            var valueItems = new List<ValueTableItem>();
            foreach (var value in values.OrderByDescending(o => o.Timestamp))
            {
                var valueItem = new ValueTableItem();
                valueItem.SensorName = selectedSensorName;
                valueItem.Value = value.Value.ToDouble();
                valueItem.Timestamp = value.Timestamp;
                valueItems.Add(valueItem);
            }

            valueTableItems = valueItems;
        }
    }

    private async Task LoadAggregate(DateTime from, DateTime to)
    {
        var queryParameters = new Dictionary<string, string>();
        queryParameters.Add("from", from.ToUnixTime().ToString());
        queryParameters.Add("to", to.ToUnixTime().ToString());
        queryParameters.Add("aggregateType", selectedAggregateType.ToString());
        queryParameters.Add("aggregateWindow", GetWindow(selectedAggregateWindow, selectedAggregateWindowUnits));

        var values = await Client.Api.QueryJson<IEnumerable<AggregateWindowModel>>($"sharc/api/{SharcId}/io/{selectedSensorName}/aggregate", queryParameters);
        if (!values.IsNullOrEmpty())
        {
            var valueItems = new List<AggregateTableItem>();
            foreach (var value in values.OrderByDescending(o => o.End))
            {
                var valueItem = new AggregateTableItem();
                valueItem.SensorName = selectedSensorName;
                valueItem.Value = value.Value.ToDouble();
                valueItem.Start = value.Start;
                valueItem.End = value.End;
                valueItems.Add(valueItem);
            }

            aggregateTableItems = valueItems;
        }
    }


    private string GetPageTitle()
    {
        return $"SHARC - {SharcId}";
    }

    private static string GetWindow(double value, WindowUnits units)
    {
        switch (units)
        {
            case WindowUnits.Seconds: return $"{value}s";
            case WindowUnits.Minutes: return $"{value}m";
            case WindowUnits.Hours: return $"{value}h";
            case WindowUnits.Days: return $"{value}d";
        }

        return null;
    }

    private string GetValueAxisLabel(object value)
    {
        return ((double)value).ToString("N2");
    }

    private string GetCategoryAxisLabel(object value)
    {
        var duration = to - from;

        var timestamp = ((DateTime)value).ToLocalTime();

        if (duration > TimeSpan.FromDays(1))
        {

        }
        else if (duration > TimeSpan.FromHours(1))
        {
            return timestamp.ToString("hh:mm tt");
        }
        else
        {
            return timestamp.ToString("hh:mm:ss tt");
        }

        return timestamp.ToString();
    }

    private object GetCategoryAxisStep()
    {
        var duration = to - from;

        if (duration > TimeSpan.FromDays(1))
        {
            return TimeSpan.FromHours(12);
        }
        else if (duration > TimeSpan.FromHours(1))
        {
            return TimeSpan.FromHours(1);
        }
        else
        {
            return TimeSpan.FromMinutes(10);
        }

        return TimeSpan.FromHours(1);
    }

}
